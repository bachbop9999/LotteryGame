// SPDX-License-Identifier: MIT
// An example of a consumer contract that relies on a subscription for funding.
pragma solidity ^0.8.7;

import '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';
import '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';
import '@chainlink/contracts/src/v0.8/ConfirmedOwner.sol';

/**
 * Request testnet LINK and ETH here: https://faucets.chain.link/
 * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/
 */

/**
 * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.
 * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.
 * DO NOT USE THIS CODE IN PRODUCTION.
 */

contract VRFv2Consumer is VRFConsumerBaseV2, ConfirmedOwner {
    event RequestSent(uint256 requestId, uint32 numWords);
    event RequestFulfilled(uint256 requestId, uint256[] randomWords);

    struct RequestStatus {
        bool fulfilled; // whether the request has been successfully fulfilled
        bool exists; // whether a requestId exists
        uint256[] randomWords;
    }
    mapping(uint256 => RequestStatus) public s_requests; /* requestId --> requestStatus */
    VRFCoordinatorV2Interface COORDINATOR;

    // Your subscription ID.
    uint64 s_subscriptionId;

    // past requests Id.
    uint256[] public requestIds;
    uint256 public lastRequestId;

    // The gas lane to use, which specifies the maximum gas price to bump to.
    // For a list of available gas lanes on each network,
    // see https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations
    bytes32 keyHash = 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15;

    // Depends on the number of requested values that you want sent to the
    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,
    // so 100,000 is a safe default for this example contract. Test and adjust
    // this limit based on the network that you select, the size of the request,
    // and the processing of the callback request in the fulfillRandomWords()
    // function.
    uint32 callbackGasLimit = 100000;

    // The default is 3, but you can set this higher.
    uint16 requestConfirmations = 3;

    // For this example, retrieve 2 random values in one request.
    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.
    uint32 numWords = 1;

    //my code
    address public manager;
    mapping(uint => range) public data;
    mapping(uint => address) public listAdd;
    uint256 public result;
    address public winner;

    uint maxNum = 0;
    uint id = 0;

    struct range{
        uint start;
        uint end;
    }

    /**
     * HARDCODED FOR GOERLI
     * COORDINATOR: 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D
     */
    constructor(uint64 subscriptionId)
        VRFConsumerBaseV2(0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D)
        ConfirmedOwner(msg.sender)
    {
        COORDINATOR = VRFCoordinatorV2Interface(0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D);
        s_subscriptionId = subscriptionId;
        manager = msg.sender;
    }

    // Assumes the subscription is funded sufficiently.
    function requestRandomWords() external onlyOwner returns (uint256 requestId) {
        // Will revert if subscription is not set and funded.
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            s_subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        s_requests[requestId] = RequestStatus({randomWords: new uint256[](0), exists: true, fulfilled: false});
        requestIds.push(requestId);
        lastRequestId = requestId;
        emit RequestSent(requestId, numWords);
        return requestId;
    }

    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {
        require(s_requests[_requestId].exists, 'request not found');
        s_requests[_requestId].fulfilled = true;
        s_requests[_requestId].randomWords = _randomWords;

        result = _randomWords[0];

        emit RequestFulfilled(_requestId, _randomWords);

        //pick winner
        // uint randomNum = _randomWords[0] % (maxNum +1);
        // uint searchId = binarySearchId(0, id, randomNum);
        // address searchAdd = listAdd[searchId];
        // payable(searchAdd).transfer(address(this).balance);
        
        //reset
        // maxNum = 0;
        // id = 0;
    }

    function binarySearchId(uint low, uint high, uint key) private returns (uint)
    {
        if(low == high) return low;
        uint mid = (low + high) / 2;
        if(key >= data[mid].start && key <= data[mid].end) return mid;
        if(key > data[mid].end) return binarySearchId(mid+1, high, key);
        return binarySearchId(low, mid-1, key);
    }

    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords) {
        require(s_requests[_requestId].exists, 'request not found');
        RequestStatus memory request = s_requests[_requestId];
        return (request.fulfilled, request.randomWords);
    }

    //my code
    function payTicket() public payable {
        require(msg.value > 0 wei);
        //players.push(payable(msg.sender));
        uint start = 1;
        uint end = 0;

        if(maxNum == 0){
            end = msg.value;
            data[id].start = start;
            data[id].end = end;

            listAdd[id] = msg.sender;

            maxNum = end;
        }else{
            start = maxNum + 1;
            end = maxNum + msg.value;
            id++;

            data[id].start = start;
            data[id].end = end;

            listAdd[id] = msg.sender;

            maxNum = end;
        }   

    }
  
    function chooseWiner() public validateIsManager {
        uint randomNum = result % (maxNum +1);
        uint searchId = binarySearchId(0, id, randomNum);
        address searchAdd = listAdd[searchId];
        winner = searchAdd;
        payable(searchAdd).transfer(address(this).balance);
        
        //reset
        maxNum = 0;
        id = 0;
        result = 0;
        //winner = address(0);
    }
    
    modifier validateIsManager() {
        require(msg.sender == manager);
        _;
    }
}
